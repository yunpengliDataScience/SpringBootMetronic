If you have an object that contains a list of inputs in a Spring Boot application and you want to express it in an HTML form, you need to structure your form in a way that represents both the object and the list within that object. Typically, you would use indexed field names to handle the list elements, while expressing the object's other properties normally.

### Scenario: An Object Containing a List

Let's say you have a Java object called `FormObject`, which contains a property `name` (a single string) and a property `inputs` (a list of strings).

#### Java Model:
```java
public class FormObject {
    private String name;
    private List<String> inputs;

    // Getters and setters
}
```

### Step 1: Expressing the Object in HTML

In your HTML form, you need to represent both the single field (`name`) and the list field (`inputs[]`). The name field can be expressed normally, while the `inputs` list will use indexed naming (`inputs[0]`, `inputs[1]`, etc.).

#### Example HTML Form:
```html
<form action="/submitForm" method="POST">
    <!-- Single field representing 'name' -->
    <div>
        <label for="name">Name:</label>
        <input type="text" name="name" id="name" value="">
    </div>

    <!-- List field representing 'inputs' -->
    <div>
        <label>Input List:</label>
        <input type="text" name="inputs[0]" value="Input 1">
        <input type="text" name="inputs[1]" value="Input 2">
        <input type="text" name="inputs[2]" value="Input 3">
    </div>

    <input type="submit" value="Submit">
</form>
```

### Step 2: Handling the Form Submission in Spring Boot

In the Spring Boot controller, you would capture both the `name` field and the `inputs` list using the `@ModelAttribute` annotation or by directly mapping the form fields to the `FormObject`.

#### Spring Boot Controller Example:
```java
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class FormController {

    @PostMapping("/submitForm")
    public String handleFormSubmission(@ModelAttribute FormObject formObject, Model model) {
        // Access the 'name' field
        System.out.println("Name: " + formObject.getName());

        // Access the 'inputs' list
        for (String input : formObject.getInputs()) {
            System.out.println("Input: " + input);
        }

        // Add the object to the model
        model.addAttribute("submittedData", formObject);
        return "result";
    }
}
```

### Step 3: Resulting Form Data

When you submit the form, the browser sends the form data as follows:
```plaintext
name=YourName
inputs[0]=Input 1
inputs[1]=Input 2
inputs[2]=Input 3
```

Spring Boot will automatically map these fields to the corresponding properties in the `FormObject` class:
- `name` will be assigned to the `name` field.
- `inputs[0]`, `inputs[1]`, and `inputs[2]` will be collected in the `inputs` list.

### Step 4: Dynamically Adding More Inputs

If you don't know the number of `inputs` ahead of time (e.g., you're dynamically adding them using JavaScript), you can still use the same indexed naming convention to handle them. Just make sure each input has a unique index, and Spring Boot will collect them into the list.

#### Example with Dynamic Input Addition (using jQuery):
```html
<form action="/submitForm" method="POST" id="form">
    <!-- Single field representing 'name' -->
    <div>
        <label for="name">Name:</label>
        <input type="text" name="name" id="name">
    </div>

    <!-- List field representing 'inputs' -->
    <div id="input-list">
        <label>Input List:</label>
        <input type="text" name="inputs[0]" value="Input 1">
    </div>

    <button type="button" id="add-input">Add Input</button>
    <input type="submit" value="Submit">
</form>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    var inputIndex = 1; // Start index for new inputs

    $('#add-input').click(function() {
        $('#input-list').append('<input type="text" name="inputs[' + inputIndex + ']" value="Input ' + (inputIndex + 1) + '">');
        inputIndex++;
    });
</script>
```

In this example:
- Initially, you have one input field (`inputs[0]`).
- When the user clicks the "Add Input" button, a new input field is added with the next index (`inputs[1]`, `inputs[2]`, etc.).
- All these inputs will be captured as a list in the Spring Boot controller.

### Summary:
1. **Expressing an object with a list in HTML**:
   - Regular properties can use normal input names like `name`.
   - List properties use indexed names like `inputs[0]`, `inputs[1]`, etc.

2. **Spring Boot form handling**:
   - Use `@ModelAttribute` to map the object from the form submission, including lists.
   - If you're using a dynamic number of inputs, ensure that each input has a unique indexed name.

